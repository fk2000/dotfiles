" ==============================================================================
" neocomplete.vim {{{
" ==============================================================================
if neobundle#tap('neocomplete.vim')

if has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
    " --------------------------------------------------------------------------
    " neocomplete の設定
    " --------------------------------------------------------------------------
    "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " popup menu の最大数を設定
    let g:neocomplete#max_list = 10
    " 補完の最大長設定(path補完のために増やす)
    let g:neocomplete#max_keyword_width = 140
    let g:neocomplete#enable_fuzzy_completion = 0

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      " For no inserting <CR> key.
      return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()

    " Mapping Cursor Key
    inoremap <expr><Up>    pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr><Down>  pumvisible() ? "\<C-n>" : "\<Down>"

    " Enable omni completion.
    AutocmdFT css setlocal omnifunc=csscomplete#CompleteCSS
    AutocmdFT html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    AutocmdFT javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    AutocmdFT xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php =
          \ '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c =
          \ '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.go = '\h\w\.\w*'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " For clang_complete
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif

    let g:neocomplete#force_overwrite_completefunc = 1

    let g:neocomplete#force_omni_input_patterns.c =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    let g:neocomplete#force_omni_input_patterns.cpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    let g:neocomplete#force_omni_input_patterns.objc =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    let g:neocomplete#force_omni_input_patterns.objcpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    let g:neocomplete#force_omni_input_patterns.python =
          \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
    let g:neocomplete#force_omni_input_patterns.typescript = '\h\w\.\w*'

    autocmd FileType python setlocal omnifunc=jedi#completions
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#rename_command = ",r"
    let g:jedi#popup_on_dot = 0
endif

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-qml {{{
" ==============================================================================
if neobundle#tap('vim-qml')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" nerdtree {{{
" ==============================================================================
if neobundle#tap('nerdtree')

augroup my_nerdtree_settings
    autocmd!
    " key mappings
    nmap <silent> <Space>F :<C-u>NERDTreeToggle<CR>
    " auto close when last buffer is NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
            \ b:NERDTreeType == "primary") | q | endif
augroup END

call neobundle#untap()
endif
" }}}
" ==============================================================================
" unite.vim {{{
" ==============================================================================
if neobundle#tap('unite.vim')

let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 50
let g:unite_split_rule = 'botright'
nnoremap <silent> <Space>y :<C-u>Unite history/yank<CR>
nnoremap <silent> <Space>b :<C-u>Unite buffer:-<CR>
nnoremap <silent> <Space>t :<C-u>Unite tab<CR>
nnoremap <silent> <Space>f :<C-u>Unite file_rec/async:!<CR>
nnoremap <silent> <Space>g :<C-u>Unite file_rec/git<CR>
nnoremap <silent> <Space>r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Space>i :<C-u>Unite file_include<CR>
nnoremap <silent> <Space>l :<C-u>Unite line<CR>
nnoremap <silent> <Space>G :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
nnoremap <silent> <Space>[ :<C-u>UnitePrevious<CR>
nnoremap <silent> <Space>] :<C-u>UniteNext<CR>
nnoremap <silent> <Space><Space> :<C-u>UniteResume<CR>

" unite grepにhw(highway)を使う
if executable('hw')
  let g:unite_source_grep_command = 'hw'
  let g:unite_source_grep_default_opts = '--no-group --no-color -e'
  let g:unite_source_grep_recursive_opt = ''
endif

nnoremap <silent> <Space>u :<C-u>Unite file_mru buffer:-<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-jade {{{
" ==============================================================================
if neobundle#tap('vim-jade')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-coffee-script {{{
" ==============================================================================
if neobundle#tap('vim-coffee-script')

" vimにcoffeeファイルタイプを認識させる
au BufRead,BufNewFile,BufReadPre *.coffee set filetype=coffee
" インデントを設定
autocmd FileType coffee setlocal sw=2 sts=2 ts=2 et

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-visualstar {{{
" ==============================================================================
if neobundle#tap('vim-visualstar')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" opencl.vim {{{
" ==============================================================================
if neobundle#tap('opencl.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-json {{{
" ==============================================================================
if neobundle#tap('vim-json')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" auto-pairs {{{
" ==============================================================================
if neobundle#tap('auto-pairs')

let g:AutoPairsShortcutToggle = '' " disable
let g:AutoPairsShortcutJump = '' " disable
let g:AutoPairsShortcutBackInsert = '' " disable
let g:AutoPairsShortcutFastWrap = '<C-e>'
let g:AutoPairsMapCR = 0
imap <silent><CR> <CR><Plug>AutoPairsReturn

call neobundle#untap()
endif
" }}}
" ==============================================================================
" committia.vim {{{
" ==============================================================================
if neobundle#tap('committia.vim')

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

endfunction

call neobundle#untap()
endif
" }}}
" ==============================================================================
" clever-f.vim {{{
" ==============================================================================
if neobundle#tap('clever-f.vim')

let g:clever_f_across_no_line=1

call neobundle#untap()
endif
" }}}
" ==============================================================================
" quickfixstatus {{{
" ==============================================================================
if neobundle#tap('quickfixstatus')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" typescript-vim {{{
" ==============================================================================
if neobundle#tap('typescript-vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-quickrun {{{
" ==============================================================================
if neobundle#tap('vim-quickrun')

let g:quickrun_no_default_key_mappings = 1
"QuickRunのキーマップ
nnoremap <silent><F5> :<C-u>QuickRun<CR>
vnoremap <silent><F5> :QuickRun<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vimproc.vim {{{
" ==============================================================================
if neobundle#tap('vimproc.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-colors-solarized {{{
" ==============================================================================
if neobundle#tap('vim-colors-solarized')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" tern_for_vim {{{
" ==============================================================================
if neobundle#tap('tern_for_vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" unite-outline {{{
" ==============================================================================
if neobundle#tap('unite-outline')

nnoremap <silent> <Space>o :<C-u>Unite -wrap -vertical -no-quit outline<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" lightline.vim {{{
" ==============================================================================
if neobundle#tap('lightline.vim')

let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'mode_map': {'c': 'NORMAL'},
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly','gitgutter', 'filename', 'modified'],
  \   ],
  \   'right': [
  \     ['lineinfo'],
  \     ['percent'],
  \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
  \   ]
  \ },
  \ 'separator': {
  \   'left': '', 'right': ''
  \ },
  \ 'subseparator': {
  \   'left': '|', 'right': '|'
  \ },
  \ 'component_function': {
  \   'modified': 'MyModified',
  \   'readonly': 'MyReadonly',
  \   'fugitive': 'MyFugitive',
  \   'filename': 'MyFilename',
  \   'fileformat': 'MyFileformat',
  \   'filetype': 'MyFiletype',
  \   'fileencoding': 'MyFileencoding',
  \   'mode': 'MyMode',
  \   'gitgutter': 'MyGitGutter',
  \ },
  \ }

let g:lightline.tabline = {
  \ 'left': [
  \   ['tabs']
  \ ],
  \ 'right': [
  \   ['gitgutter', 'fugitive', 'close']
  \ ]
  \ }

function! MyModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! MyReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "RO"
    else
        return ""
    endif
endfunction

function! MyFilename()
  return  (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]')
endfunction

function! MyFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

call neobundle#untap()
endif
" }}}
" ==============================================================================
" tsuquyomi {{{
" ==============================================================================
if neobundle#tap('tsuquyomi')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" syntastic {{{
" ==============================================================================
if neobundle#tap('syntastic')

let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" なぜかQuickfix listのエラーがでるので必ず0にする
let g:syntastic_auto_loc_list = 0

let g:syntastic_enable_signs   = 1
let g:syntastic_error_symbol   = '✗'
let g:syntastic_warning_symbol = '⚠'

let g:syntastic_echo_current_error  = 1
let g:syntastic_enable_highlighting = 0

let g:syntastic_c_config_file   = '~/.clang_complete'
let g:syntastic_cpp_config_file = '~/.clang_complete'
let g:syntastic_cpp_compiler_options = '-std=c++1y -Wall -Weffc++'
let g:syntastic_c_compiler = 'clang++'

" cpplint
let g:syntastic_cpp_cpplint_thres = 5
let g:syntastic_cpp_cpplint_args = '--verbose=3'

nnoremap <silent> <Space>s :<C-u>SyntasticCheck cpplint<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-indent-guides {{{
" ==============================================================================
if neobundle#tap('vim-indent-guides')

" インデントの深さに色を付ける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
au FileType coffee,ruby,javascript,python IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle

call neobundle#untap()
endif
" }}}
" ==============================================================================
" neobundle.vim {{{
" ==============================================================================
if neobundle#tap('neobundle.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-go {{{
" ==============================================================================
if neobundle#tap('vim-go')

let g:go_highlight_functions = 1
let g:go_highlight_methods   = 1
let g:go_highlight_structs   = 1

call neobundle#untap()
endif
" }}}
" ==============================================================================
" incsearch.vim {{{
" ==============================================================================
if neobundle#tap('incsearch.vim')

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

call neobundle#untap()
endif
" }}}
" ==============================================================================
" caw.vim {{{
" ==============================================================================
if neobundle#tap('caw.vim')

" デフォルトマッピングを OFF
let g:caw_no_default_keymappings = 1
" キーマッピング
nmap <silent> ,/ <Plug>(caw:i:toggle)
vmap <silent> ,/ <Plug>(caw:i:toggle)

call neobundle#untap()
endif
" }}}
" ==============================================================================
" opengl.vim {{{
" ==============================================================================
if neobundle#tap('opengl.vim')

Autocmd BufRead *.c,*.h,*.cpp,*.hpp call MyOpenGLCheck()
function! MyOpenGLCheck()
  if search('^#include <gl.*\.h>','n') > 0 ||
  \  search('^#include <GL.*/gl.*\.h>', 'n') > 0 ||
  \  search('^#include <EGL/egl.h>', 'n') > 0
    NeoBundleSource opengl.vim
  endif
endfunction

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-gitgutter {{{
" ==============================================================================
if neobundle#tap('vim-gitgutter')

let g:gitgutter_sign_column_always = 1
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '_'
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 1
let g:gitgutter_max_signs = 2000
let g:gitgutter_escape_grep = 1
let g:gitgutter_highlight_lines = 0

nnoremap <silent> [h :<C-u>GitGutterPrevHunk<CR>
nnoremap <silent> ]h :<C-u>GitGutterNextHunk<CR>
nnoremap <silent> gA :<C-u>GitGutterStageHunk<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" neosnippet.vim {{{
" ==============================================================================
if neobundle#tap('neosnippet.vim')

" Plugin key-mappings.
imap <Nul> <C-Space>
smap <Nul> <C-Space>
xmap <Nul> <C-Space>
imap <Nul> <Plug>(neosnippet_expand_or_jump)
smap <Nul> <Plug>(neosnippet_expand_or_jump)
xmap <Nul> <Plug>(neosnippet_expand_target)

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-toml {{{
" ==============================================================================
if neobundle#tap('vim-toml')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" jedi-vim {{{
" ==============================================================================
if neobundle#tap('jedi-vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" agit.vim {{{
" ==============================================================================
if neobundle#tap('agit.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" next-alter.vim {{{
" ==============================================================================
if neobundle#tap('next-alter.vim')

let g:next_alter#do_not_create_not_exist_pair_extension = 2
" key is file extension, value is alternate file extension.
let g:next_alter#pair_extension = {
            \ 'c'   : [ 'h' ],
            \ 'C'   : [ 'H' ],
            \ 'cc'  : [ 'h' ],
            \ 'CC'  : [ 'H', 'h'],
            \ 'cpp' : [ 'h', 'hpp' ],
            \ 'CPP' : [ 'H', 'HPP' ],
            \ 'cxx' : [ 'h', 'hpp' ],
            \ 'CXX' : [ 'H', 'HPP' ],
            \ 'h'   : [ 'c', 'cpp', 'cxx' ],
            \ 'H'   : [ 'C', 'CPP', 'CXX' ],
            \ 'hpp' : [ 'cpp', 'cxx'],
            \ 'HPP' : [ 'CPP', 'CXX'],
            \ }

" this list shows search directory to find alternate file.
let g:next_alter#search_dir = [ '.' , '..', './include', '../include' ]

" this is used when it opens alternate file buffer.
let g:next_alter#open_option = 'vertical topleft'

" key mapping
nnoremap <silent> <Space>a :<C-u>OpenNAlter<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-fugitive {{{
" ==============================================================================
if neobundle#tap('vim-fugitive')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" previm {{{
" ==============================================================================
if neobundle#tap('previm')

Autocmd BufRead,BufNewFile *.{md,mkdn} set filetype=markdown
let g:previm_open_cmd = ''
nnoremap [previm] <Nop>
nmap <Space>p [previm]
nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
nnoremap <silent> [previm]r :call previm#refresh()<CR>

call neobundle#untap()
endif
" }}}
" ==============================================================================
" rust.vim {{{
" ==============================================================================
if neobundle#tap('rust.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" open-browser.vim {{{
" ==============================================================================
if neobundle#tap('open-browser.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-wayland {{{
" ==============================================================================
if neobundle#tap('vim-wayland')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" accelerated-jk {{{
" ==============================================================================
if neobundle#tap('accelerated-jk')

" jkを加速する
" conservative deceleration
let g:accelerated_jk_enable_deceleration = 1
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-table-mode {{{
" ==============================================================================
if neobundle#tap('vim-table-mode')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-expand-region {{{
" ==============================================================================
if neobundle#tap('vim-expand-region')

vmap <C-v> <Plug>(expand_region_expand)

call neobundle#untap()
endif
" }}}
" ==============================================================================
" javascript-libraries-syntax.vim {{{
" ==============================================================================
if neobundle#tap('javascript-libraries-syntax.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" gapply.vim {{{
" ==============================================================================
if neobundle#tap('gapply.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-clang {{{
" ==============================================================================
if neobundle#tap('vim-clang')

" disable auto completion for vim-clang
let g:clang_auto = 0
" default 'longest' can not work with neocomplete
let g:clang_c_completeopt   = 'menuone'
let g:clang_cpp_completeopt = 'menuone'

if executable('clang-3.6')
    let g:clang_exec = 'clang-3.6'
elseif executable('clang-3.5')
    let g:clang_exec = 'clang-3.5'
elseif executable('clang-3.4')
    let g:clang_exec = 'clang-3.4'
else
    let g:clang_exec = 'clang'
endif

if executable('clang-format-3.6')
    let g:clang_format_exec = 'clang-format-3.6'
elseif executable('clang-format-3.5')
    let g:clang_format_exec = 'clang-format-3.5'
elseif executable('clang-format-3.4')
    let g:clang_format_exec = 'clang-format-3.4'
else
    let g:clang_exec = 'clang-format'
endif

let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-js-indent {{{
" ==============================================================================
if neobundle#tap('vim-js-indent')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" glsl.vim {{{
" ==============================================================================
if neobundle#tap('glsl.vim')


call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim-hier {{{
" ==============================================================================
if neobundle#tap('vim-hier')

let g:hier_enabled = 0

call neobundle#untap()
endif
" }}}
" ==============================================================================
" vim: set ft=vim fdm=marker ff=unix fileencoding=utf-8 expandtab ts=2 sw=2 :
" ==============================================================================
